name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:

  Test:
    name: Test ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, Windows]
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest

  Linux:
    name: Build Linux
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get tag
        id: tag
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller
          pip install -r requirements.txt
      - name: Building GUI
        run: |
          pyinstaller --name=GlintMaskGenerator-${{ steps.tag.outputs.tag }} -F --windowed --icon=resources/gmt.ico gui.py
      - name: Building CLI
        run: |
          pyinstaller --name=glint-mask-${{ steps.tag.outputs.tag }} -F cli.py
      - name: Archiving release
        run: |
          tar -czvf dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz -C dist GlintMaskGenerator-${{ steps.tag.outputs.tag }} glint-mask-${{ steps.tag.outputs.tag }}
      - name: Upload release file
        uses: actions/upload-artifact@v1
        with:
          name: GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz
          path: dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz

  Windows:
    name: Build Windows
    needs: [Test]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get tag
        id: tag
        shell: bash
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller
          pip install -r requirements.txt
      - name: Building GUI
        run: |
          pyinstaller --name=GlintMaskGenerator-${{ steps.tag.outputs.tag }} -F --windowed --icon=resources/gmt.ico gui.py
      - name: Building CLI
        run: |
          pyinstaller --name=glint-mask-${{ steps.tag.outputs.tag }} -F cli.py
      - name: Archiving release
        run: |
          tar -czvf dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz -C dist GlintMaskGenerator-${{ steps.tag.outputs.tag }}.exe glint-mask-${{ steps.tag.outputs.tag }}.exe
      - name: Upload release file
        uses: actions/upload-artifact@v1
        with:
          name: GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz
          path: dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz

  Release:
    needs: [Linux, Windows]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get tag
        id: tag
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Download Linux release file
        uses: actions/download-artifact@master
        with:
          name: GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz
          path: dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz
      - name: Download Windows release file
        uses: actions/download-artifact@master
        with:
          name: GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz
          path: dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: true
      - name: Upload Linux release file asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz
          asset_name: GlintMaskGenerator-${{ steps.tag.outputs.tag }}-linux.tar.gz
          asset_content_type: application/gzip
      - name: Upload Windows release file asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz/GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz
          asset_name: GlintMaskGenerator-${{ steps.tag.outputs.tag }}-win64.tar.gz
          asset_content_type: application/gzip